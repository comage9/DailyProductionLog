## Workspace Rules (analytics-dashboard-main Specific)

- **데이터 처리 일관성**: Pandas DataFrame 사용 시, 데이터 타입(특히 날짜 `datetime64`, 숫자 `int64`/`float64`, 카테고리 `category`)을 명시적으로 정의하고 일관되게 처리합니다. 데이터 로드 후 즉시 타입 변환 및 검증 단계를 포함합니다.
- **API 응답 포맷 표준화**: 모든 API 응답은 일관된 JSON 구조를 따릅니다. 기본적으로 `{"status": "success/error", "data": ..., "message": ...}` 형태를 사용합니다. 에러 발생 시, HTTP 상태 코드와 함께 명확한 에러 메시지를 반환합니다.
- **스크래퍼 안정성 확보**:
    - `app/scrapers/coupan_scraper.py` 및 향후 추가될 스크래퍼는 `try-except-finally` 블록을 적극 활용하여 예외 상황(요소 미발견, 네트워크 타임아웃, 페이지 구조 변경, 예상치 못한 알림 등)에 대한 방어적 프로그래밍을 수행합니다.
    - 예외 발생 시, 발생 시간, 실패한 URL, 시도한 작업, 에러 메시지, (가능하다면) 페이지 소스 일부를 포함한 상세 로그를 기록합니다.
    - CSS 선택자나 XPath는 최대한 견고하게 작성하고, 대안 선택자를 준비하거나, 요소의 존재를 여러 번 확인하는 로직을 추가합니다.
    - `WebDriverWait`와 `expected_conditions`를 적절히 사용하여 동적 컨텐츠 로딩을 기다립니다.
- **프론트엔드 상태 관리**: React 컴포넌트의 상태 관리는 현재 `useState`, `useEffect` 중심으로 이루어지고 있습니다. 전역 상태 관리 필요성이 대두될 경우, `Context API` 또는 `Zustand`와 같은 경량 라이브러리 도입을 우선 검토합니다. 복잡한 상태 로직은 커스텀 훅으로 분리합니다.
- **보안 및 민감 정보 관리**:
    - 모든 민감 정보(DB 경로, 외부 API 키, 구글 시트 ID 등)는 `.env` 파일에 정의하고, `python-dotenv` (백엔드) 또는 `process.env` (프론트엔드, 빌드 시 주입)를 통해 로드합니다.
    - `.env` 파일은 `.gitignore`에 반드시 포함하여 저장소에 커밋되지 않도록 합니다.
- **주석 및 문서화 (Global Rule 구체화)**:
    - **백엔드**: FastAPI 엔드포인트에는 Pydantic 모델을 사용하여 요청/응답 스키마를 명확히 하고, `docstring`을 통해 API의 목적, 파라미터, 반환값, 발생 가능한 예외를 설명합니다. 복잡한 데이터 처리 함수(예: `forecast.py` 내부 함수)에는 로직 설명을 추가합니다.
    - **프론트엔드**: 주요 React 컴포넌트에는 `props`의 타입과 역할, 컴포넌트의 주요 기능에 대한 주석을 JSDoc 형식으로 추가합니다. 복잡한 상태 업데이트 로직이나 `useEffect`의 의존성 배열에 대한 설명을 포함합니다.
- **테스트 코드 작성**: 백엔드는 `pytest`를 사용하여 API 엔드포인트별, 주요 함수별 단위 테스트 및 통합 테스트를 작성합니다. 프론트엔드는 `Jest` 및 `React Testing Library`를 사용하여 주요 컴포넌트 렌더링 및 사용자 인터랙션 테스트를 작성합니다. (현재 `README.md`에 명시된 테스트 실행 명령어 준수)
- **API 엔드포인트 네이밍**: `/api/` 접두사를 사용하고, 리소스 기반으로 명확하고 일관된 네이밍 규칙을 따릅니다. (예: `/api/products`, `/api/reports/summary`)